name: docker-compose files test

on:
  push:
    branches:
      - '*'  

jobs:
  build-and-test:
    strategy:
      matrix:
        dir: [python]
    runs-on: ubuntu-latest
    timeout-minutes: 30

    env:
      GITHUB_USERNAME: ${{ github.repository_owner }} # Used to be ${{ github.repository_owner }}, but the jenkins-docs repository does not have a Jenkinsfile.
      DOCKERHUB_USERNAME: ${{ github.repository_owner }}
      IMAGE_PREFIX: ghcr.io
      BRANCH_SUFFIX: clean-up
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  

      - name: Set Sample Tutorial Repository URL
        run: |
          echo "PARTIAL_REPO_URL=${GITHUB_USERNAME}/" >> $GITHUB_ENV
          echo "GITHUB_ENV is $GITHUB_ENV"
          echo "REPO_URL is $REPO_URL"
        shell: bash

      - name: Extract current branch name
        shell: bash
        run: |
          BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/} | sed -e 's#/#-#g')
          if [[ "$BRANCH_NAME" == "main" ]]; then BRANCH_NAME=""; fi
          echo "BRANCH=$BRANCH_NAME" >> $GITHUB_ENV
        id: extract_branch

      - name: Extract the current branch name and set the BRANCH environment variable
        shell: bash
        run: |
          BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/} | sed -e 's#/#-#g')
          if [[ "$BRANCH_NAME" == "main" ]]; then BRANCH_NAME=""; fi
          echo "BRANCH=$BRANCH_NAME" >> $GITHUB_ENV

      - name: Print Sample Tutorial REPO_URL
        run: echo "The repository URL is ${{ env.PARTIAL_REPO_URL }}"

      # Create a config.xml file in the dockerfiles/jobs directory to add the test job to the instance.
      - name: Create config.xml for the Sample Tutorial job
        env:
          BRANCH_SUFFIX: ${{ env.BRANCH }}
          # Full repo URL
          REPO_URL: "https://github.com/${{ env.PARTIAL_REPO_URL }}.git"
        run: |
          # adding test job to the tutorial with REPO_URL
          # The XML content is a Jenkins job configuration in XML format.
          # It defines a pipeline job that checks out the specified repository and runs the Jenkinsfile in it.
          XML_CONTENT=$(cat <<EOL
          <?xml version='1.1' encoding='UTF-8'?>
          <flow-definition plugin="workflow-job@1316.vd2290d3341a_f">
            <actions>
              <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2144.v077a_d1928a_40"/>
              <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2144.v077a_d1928a_40">
                <jobProperties/>
                <triggers/>
                <parameters/>
                <options/>
              </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
            </actions>
            <description></description>
            <keepDependencies>false</keepDependencies>
            <properties/>
            <definition class="org.jenkinsci.plugins.workflow.cps.CpsScmFlowDefinition" plugin="workflow-cps@3722.v85ce2a_c6240b_">
              <scm class="hudson.plugins.git.GitSCM" plugin="git@5.2.0">
                <configVersion>2</configVersion>
                <userRemoteConfigs>
                  <hudson.plugins.git.UserRemoteConfig>
                    <url>${REPO_URL}</url>
                  </hudson.plugins.git.UserRemoteConfig>
                </userRemoteConfigs>
                <branches>
                  <hudson.plugins.git.BranchSpec>
                    <name>*/master</name>
                  </hudson.plugins.git.BranchSpec>
                </branches>
                <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
                <submoduleCfg class="empty-list"/>
                <extensions/>
              </scm>
              <scriptPath>Jenkinsfile</scriptPath>
              <lightweight>true</lightweight>
            </definition>
            <triggers/>
            <disabled>false</disabled>
          </flow-definition>
          EOL
          )

          echo "pwd is $(pwd)"
          echo "$XML_CONTENT" > ./config.xml
          echo "checking files below"
          tree .

      # Check if any files in the specified directory have changed and run docker-compose up with the directory as an argument if there are changes.
      - name: checking files & running the docker compose up with ${{ matrix.dir }} argument
        run: |
          if [ $(git diff --name-only HEAD^ HEAD | uniq | grep -c "${{ matrix.dir }}") -ne 0 ]; then
            echo "Changed directories are $(git diff --name-only HEAD^ HEAD | uniq)"
            docker compose -f build-docker-compose.yaml --profile ${{ matrix.dir }} up -d --build  # Run docker-compose up with the directory as an argument.
          else
            echo "No Internal examples were modified"
            echo 'NO_CHANGES=true' >> $GITHUB_ENV
          fi

      # Wait for services to be ready if there were changes in the specified directory.
      - name: Waiting for services to be ready
        if: env.NO_CHANGES != 'true'
        run: |
          timeout 60 bash -c 'until curl -s -f http://127.0.0.1:8080/login > /dev/null; do sleep 5; done' && echo "Jenkins is running" || echo "Jenkins is not running"
          echo "Jenkins is ready"
          JENKINS_VERSION=$(curl -s -I -k http://admin:admin@127.0.0.1:8080 | grep -i '^X-Jenkins:' | awk '{print $2}')
          echo "Jenkins version is: $JENKINS_VERSION"

      #  Test The stack
      - name: Run curl command to test the stack
        if: env.NO_CHANGES != 'true'
        run: |
          set -x
          
          JENKINS_VERSION=$(curl -s -I -k http://admin:admin@127.0.0.1:8080 | grep -i '^X-Jenkins:' | awk '{print $2}')
          echo "Jenkins version is: $JENKINS_VERSION"

          CRUMB=$(curl -s -k http://admin:admin@127.0.0.1:8080/crumbIssuer/api/xml?xpath=concat\(//crumbRequestField,%22:%22,//crumb\) -c cookies.txt)
          echo "CRUMB was found."
          TOKEN=$(curl -s -k 'http://admin:admin@127.0.0.1:8080/user/admin/descriptorByName/jenkins.security.ApiTokenProperty/generateNewToken' --data 'newTokenName=kb-token' -b cookies.txt -H $CRUMB | jq -r '.data.tokenValue')
          echo "TOKEN was found."

          curl -X POST -H "Content-Type: text/xml" --user admin:$TOKEN --data-binary @config.xml http://127.0.0.1:8080/createItem?name=${{ matrix.dir }}
          
          JOB_NAME="${{ matrix.dir }}"
          echo "Launching a job whose name is $JOB_NAME (unencoded)"
          
          JOB_NAME_ENCODED=$(echo "$JOB_NAME" | awk '{ gsub(/ /, "%20"); gsub(/\(/, "%28"); gsub(/\)/, "%29"); print }')
          echo "JOB_NAME_ENCODED is $JOB_NAME_ENCODED"

          JOB_PRESENT=$(curl -u admin:$TOKEN http://127.0.0.1:8080/api/json?tree=jobs%5Bname%5D)
          echo "JOB_PRESENT is $JOB_PRESENT"

          curl -X POST -u admin:$TOKEN 127.0.0.1:8080/job/$JOB_NAME_ENCODED/build

          sleep 10
          echo "Waiting for the job to start running..."
          BUILD_NUMBER="null"

          while [[ -z $BUILD_NUMBER || $BUILD_NUMBER == "null" ]]; do

            BUILD_INFO=$(curl -s -k http://admin:$TOKEN@127.0.0.1:8080/job/$JOB_NAME_ENCODED/api/json)
            echo "Retrieved build info: $BUILD_INFO"

            BUILD_NUMBER=$(echo $BUILD_INFO | jq -r '.lastBuild.number')

            BUILD_IN_PROGRESS=$(echo $BUILD_INFO | jq -r '.lastBuild.building')
            echo "Build number: $BUILD_NUMBER"
            echo "Build in progress: $BUILD_IN_PROGRESS"

            if [[ -n $BUILD_NUMBER && $BUILD_IN_PROGRESS == "true" ]]; then
              break
            fi

            sleep 15 
          done
          echo "This is BUILD__NUMBER $BUILD_NUMBER"

          sleep 15
          if [[ -z $BUILD_NUMBER ]]; then

            echo "Job has never run"
          else
          
            echo "Job started. Build number: $BUILD_NUMBER"
          fi
          
            echo "Waiting for the job to complete..."
          
            while true; do
              BUILD_STATUS=$(curl -s -k http://admin:$TOKEN@127.0.0.1:8080/job/$JOB_NAME_ENCODED/$BUILD_NUMBER/api/json | jq -r '.result')
              BUILD_IN_PROGRESS=$(curl -s -k http://admin:$TOKEN@127.0.0.1:8080/job/$JOB_NAME_ENCODED/$BUILD_NUMBER/api/json | jq -r '.building')
              echo "Build status: $BUILD_STATUS"
              echo "Build in progress: $BUILD_IN_PROGRESS"
              # If the build status is not "null", it means the build has been completed
              if [[ $BUILD_STATUS != "null" ]]; then
                break
              fi

              curl -s -k -X POST -u admin:$TOKEN http://127.0.0.1:8080/job/$JOB_NAME_ENCODED/$BUILD_NUMBER/input/PROCEED/proceedEmpty
          
              sleep 5  # Adjust the sleep duration as needed
            done

            if [[ $BUILD_STATUS == "SUCCESS" ]]; then
              echo "Job succeeded"
            else
              echo "Job failed"
              echo "below is the console output"
              echo "====================="
              curl -s -k -u admin:$TOKEN http://127.0.0.1:8080/job/$JOB_NAME/$BUILD_NUMBER/console
              exit 1 # Exit with a non-zero status to fail the step and stop the workflow
            fi

      - name: Teardown
        if: env.NO_CHANGES != 'true'
        run: docker compose down


  build-and-test-default:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up and start Docker Compose
        run: |
          docker compose --profile default up -d 
          echo "Docker Compose started"

      - name: Waiting for services to be ready

        run: |
          timeout 60 bash -c 'until curl -s -f http://127.0.0.1:8080/login > /dev/null; do sleep 5; done' && echo "Jenkins is running" || echo "Jenkins is not running"
          echo "Jenkins is ready"
          JENKINS_VERSION=$(curl -s -I -k http://admin:admin@127.0.0.1:8080 | grep -i '^X-Jenkins:' | awk '{print $2}')
          echo "Jenkins version is: $JENKINS_VERSION"

      - name: Run curl command to test the stack

        run: |
          set -x
          JENKINS_VERSION=$(curl -s -I -k http://admin:admin@127.0.0.1:8080 | grep -i '^X-Jenkins:' | awk '{print $2}')
          echo "Jenkins version is: $JENKINS_VERSION"

          CRUMB=$(curl -s -k http://admin:admin@127.0.0.1:8080/crumbIssuer/api/xml?xpath=concat\(//crumbRequestField,%22:%22,//crumb\) -c cookies.txt)
          echo "CRUMB was found."
          TOKEN=$(curl -s -k 'http://admin:admin@127.0.0.1:8080/user/admin/descriptorByName/jenkins.security.ApiTokenProperty/generateNewToken' --data 'newTokenName=kb-token' -b cookies.txt -H $CRUMB | jq -r '.data.tokenValue')
          echo "TOKEN was found."
          
          echo "Launching a job"
          JOB_NAME="%28simple%29%20demo%20job"
          
          JOB_NAME_ENCODED=$(echo "$JOB_NAME" | awk '{ gsub(/ /, "%20"); gsub(/\(/, "%28"); gsub(/\)/, "%29"); print }')
          echo "JOB_NAME_ENCODED is $JOB_NAME_ENCODED"

          JOB_PRESENT=$(curl -u admin:$TOKEN http://127.0.0.1:8080/api/json?tree=jobs%5Bname%5D)
          echo "JOB_PRESENT is $JOB_PRESENT"

          curl -X POST -u admin:$TOKEN 127.0.0.1:8080/job/$JOB_NAME_ENCODED/build

          sleep 10
          echo "Waiting for the job to start running..."
          BUILD_NUMBER="null"

          while [[ -z $BUILD_NUMBER || $BUILD_NUMBER == "null" ]]; do

            BUILD_INFO=$(curl -s -k http://admin:$TOKEN@127.0.0.1:8080/job/$JOB_NAME_ENCODED/api/json)
            echo "Retrieved build info: $BUILD_INFO"
          
            BUILD_NUMBER=$(echo $BUILD_INFO | jq -r '.lastBuild.number')
          
            BUILD_IN_PROGRESS=$(echo $BUILD_INFO | jq -r '.lastBuild.building')
            echo "Build number: $BUILD_NUMBER"
            echo "Build in progress: $BUILD_IN_PROGRESS"
          
            if [[ -n $BUILD_NUMBER && $BUILD_IN_PROGRESS == "true" ]]; then
              break
            fi
          
            sleep 15  # Adjust the sleep duration as needed
          done
          echo "This is BUILD__NUMBER $BUILD_NUMBER"
          
          sleep 15
          if [[ -z $BUILD_NUMBER ]]; then
            echo "Job has never run"
          else
            echo "Job started. Build number: $BUILD_NUMBER"
          fi
          
            echo "Waiting for the job to complete..."
          
            while true; do
              BUILD_STATUS=$(curl -s -k http://admin:$TOKEN@127.0.0.1:8080/job/$JOB_NAME_ENCODED/$BUILD_NUMBER/api/json | jq -r '.result')
              BUILD_IN_PROGRESS=$(curl -s -k http://admin:$TOKEN@127.0.0.1:8080/job/$JOB_NAME_ENCODED/$BUILD_NUMBER/api/json | jq -r '.building')
              echo "Build status: $BUILD_STATUS"
              echo "Build in progress: $BUILD_IN_PROGRESS"

              if [[ $BUILD_STATUS != "null" ]]; then
                break
              fi

              sleep 5  # Adjust the sleep duration as needed
            done

            if [[ $BUILD_STATUS == "SUCCESS" ]]; then
              echo "Job succeeded"
            else
              echo "Job failed"
              echo "below is the console output"
              echo "====================="
              curl -s -k -u admin:$TOKEN http://127.0.0.1:8080/job/$JOB_NAME/$BUILD_NUMBER/console
              exit 1 
            fi

      - name: Teardown
        run: |
          docker compose down
